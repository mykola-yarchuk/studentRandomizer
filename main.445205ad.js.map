{"version":3,"sources":["scripts/main.js"],"names":["roomSize","students","rooms","sessionQueue","result","sessionCount","sessions","createRooms","i","length","j","person","hookUnknownPerson","undefined","push","id","fillWithFriends","f","r","friends","roomIndex","room","Math","floor","random","q","redFlag","includes","notFullRoom","student","find","stud","replaceIdsWithNames","arr","name","createSessions","roomHistory","hasOwnProperty","runFCode","container","document","querySelector","showSessions","session","innerHTML","sessionContainer","createElement","sessionHeader","classList","add","innerText","append","roomHeader","list","listElement","studentName","clean","createStudents","textarea","text","value","regexp","words","replace","split","names","removeSpaces","forEach","el","redundantNumber","ceil","info","createEmptyRooms","genBtn","onclick"],"mappings":"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","file":"main.445205ad.js","sourceRoot":"../src","sourcesContent":["'use strict';\n\nconst roomSize = 6;\nconst students = [];\nconst rooms = [];\nconst sessionQueue = [];\nlet result = {};\nlet sessionCount = 0;\nlet sessions = {};\n\nconst createRooms = () => {\n  for (let i = 0; i < rooms.length; i++) {\n    for (let j = 0; j < roomSize; j++) {\n      const person = hookUnknownPerson(rooms[i]);\n\n      if (person !== undefined) {\n        rooms[i].push(person.id);\n        sessionQueue.push(person.id);\n      }\n    }\n\n    if (rooms[i].length !== roomSize) {\n      fillWithFriends(rooms[i]);\n    }\n\n    for (let f = 0; f < rooms[i].length; f++) {\n      for (let r = 0; r < rooms[i].length; r++) {\n        if (rooms[i][f] !== rooms[i][r]) {\n          students[rooms[i][f]].friends.push(rooms[i][r]);\n        }\n      }\n    }\n\n    const roomIndex = i + 1;\n\n    if (!result[`room ${roomIndex}`]) {\n      result[`room ${roomIndex}`] = [[...rooms[i]]];\n    } else {\n      result[`room ${roomIndex}`].push([...rooms[i]]);\n    }\n\n    rooms[i].length = 0;\n  }\n\n  sessionQueue.length = 0;\n};\n\nconst hookUnknownPerson = (room) => {\n  let i = Math.floor(Math.random() * students.length);\n\n  for (let q = 0; q < students.length; q++) {\n    let redFlag = false;\n\n    if (!room.length) {\n      if (sessionQueue.includes(students[i].id)) {\n        i = i + 1 > students.length - 1 ? 0 : i + 1;\n        continue;\n      }\n\n      return students[i];\n    }\n\n    for (let j = 0; j < room.length; j++) {\n      if (students[room[j]].friends.includes(students[i].id)\n        || sessionQueue.includes(students[i].id)) {\n        redFlag = true;\n      }\n    }\n\n    if (redFlag) {\n      i = i + 1 > students.length - 1 ? 0 : i + 1;\n      continue;\n    }\n\n    return students[i];\n  }\n};\n\nconst fillWithFriends = (notFullRoom) => {\n  while (notFullRoom.length < roomSize) {\n    const student = students.find(stud => !sessionQueue.includes(stud.id));\n\n    if (!student) {\n      break;\n    }\n    notFullRoom.push(student.id);\n    sessionQueue.push(student.id);\n  }\n};\n\nconst replaceIdsWithNames = (arr) => {\n  for (let j = 0; j < arr.length; j++) {\n    const id = arr[j];\n\n    arr[j] = `@${students[id].name}`;\n  }\n};\n\nconst createSessions = () => {\n  for (const room in result) {\n    const roomHistory = result[room];\n\n    for (let i = 0; i < roomHistory.length; i++) {\n      if (!sessions.hasOwnProperty(`session ${i + 1}`)) {\n        sessions[`session ${i + 1}`] = [];\n      }\n      replaceIdsWithNames(roomHistory[i]);\n\n      sessions[`session ${i + 1}`].push(roomHistory[i]);\n    }\n  }\n};\n\nconst runFCode = () => {\n  for (let i = 0; i < sessionCount; i++) {\n    createRooms();\n  }\n\n  createSessions();\n};\n\nconst container = document.querySelector('.container');\n\nconst showSessions = () => {\n  container.innerHTML = ``;\n\n  for (const session in sessions) {\n    const sessionContainer = document.createElement('div');\n    const sessionHeader = document.createElement('h3');\n\n    sessionContainer.classList.add('session');\n    sessionHeader.innerText = session;\n    sessionContainer.append(sessionHeader);\n\n    for (let i = 0; i < sessionCount; i++) {\n      const room = document.createElement('div');\n      const roomHeader = document.createElement('h3');\n      const list = document.createElement('ul');\n\n      list.classList.add('singleSession');\n      room.classList.add('room');\n\n      roomHeader.innerText = `room ${i + 1}`;\n      room.append(roomHeader);\n\n      for (let j = 0; j < roomSize; j++) {\n        const listElement = document.createElement('ol');\n        const studentName = sessions[session][i][j];\n\n        if (studentName) {\n          listElement.innerText = `${studentName}  `;\n          list.append(listElement);\n        }\n      }\n\n      room.append(list);\n      sessionContainer.append(room);\n      container.append(sessionContainer);\n    }\n  }\n};\n\nconst clean = () => {\n  students.length = 0;\n  result = {};\n  sessions = {};\n};\n\n// TODO cleanUp this mess\nconst createStudents = () => {\n  const textarea = document.querySelector('#names');\n  const text = textarea.value;\n  const regexp = /[^А-ЯA-Zіїєёэ]/gi;\n\n  const fixedTxt = text.replace(regexp, ' ');\n  const words = fixedTxt.split(' ');\n  const names = [];\n\n  const removeSpaces = [];\n\n  words.forEach((el) => {\n    if (el.replace(regexp, ' ')) {\n      removeSpaces.push(el.replace(regexp, ' '));\n    }\n  });\n\n  for (let i = 0; i < removeSpaces.length; i += 2) {\n    const redundantNumber = Math.ceil((i + 1) / 2);\n\n    names.push(`${redundantNumber}) ${removeSpaces[i + 1]} ${removeSpaces[i]}`);\n  }\n\n  for (let i = 0; i < names.length; i += 1) {\n    const info = names[i].split(' ');\n    const name = `${info[1]} ${info[2]}`;\n\n    students.push({\n      id: i,\n      name,\n      friends: [],\n    });\n  }\n};\n\nconst createEmptyRooms = () => {\n  sessionCount = Math.ceil(students.length / roomSize);\n\n  for (let i = 0; i < sessionCount; i += 1) {\n    rooms[i] = [];\n  }\n};\n\n// eslint-disable-next-line\ngenBtn.onclick = () => {\n  clean();\n\n  createStudents();\n  createEmptyRooms();\n\n  runFCode();\n  showSessions();\n};\n"]}